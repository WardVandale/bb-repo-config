---
- name: "Setup BB Pipeline variables"
  hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: Block for pre_tasks
      block:
        - name: Test AWS_REGION
          shell: "[[ -n $AWS_REGION ]]"
          register: region
          failed_when: false
          changed_when: false
          check_mode: no
        - name: Test AWS_SECRET_ACCESS_KEY
          shell: "[[ -n $AWS_SECRET_ACCESS_KEY ]]"
          register: secret
          failed_when: false
          changed_when: false
          check_mode: no
        - name: Test AWS_ACCESS_KEY_ID
          shell: "[[ -n $AWS_ACCESS_KEY_ID ]]"
          register: key
          failed_when: false
          changed_when: false
          check_mode: no
        - name: Do assertions on configfile and AWS credential envvars
          assert:
            that:
              - "key.rc == 0"
              - "secret.rc == 0"
              - "region.rc == 0"

  vars:

  tasks:
    - name: "Set config_basedir fact"
      set_fact:
        config_basedir: "{{ config_basedir | default('/config') }}"

    - name: "Get list of all repo config files to include in sa_bb_config.yml"
      set_fact:
        bb_repo_config_include_files: "{{ lookup('pipe', 'cd ' + config_basedir + '/include; find . -name \\*\\.\\*y\\*ml').split() }}"
      tags: [ 'always' ]

    - name: "Process the repo bb config template"
      template:
        src: "{{ config_basedir }}/sa_bb_config.yml"
        dest: "{{ generated_files_dir | default('generated-files') }}/bb-repo-config.yml"
      tags: [ 'always' ]

    - name: "Read repo bb config"
      include_vars:
        file: "{{ generated_files_dir | default('generated-files') }}/bb-repo-config.yml"
      tags: [ 'always' ]

    - name: "TODO Assume role for bastion/admin"
      sts_assume_role:
        role_arn: "arn:aws:iam::{{ bastion_account_id }}:role/ServiceAccount/{{ sts_role }}"
        role_session_name: "bastion-{{ bastion_account_id }}-{{ sts_role }}"
      register: assumed_role
      check_mode: no
      tags: [ 'always' ]

    - name: "Get client_id, client_secret, user and api token for BB authentication from AWS SSM in the Bastion account"
      set_fact:
        client_id: "{{ lookup('aws_ssm', 'bb_client_id', aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
        client_secret: "{{ lookup('aws_ssm', 'bb_client_secret', aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
        bb_user: "{{ lookup('aws_ssm', 'bb_user', aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
        bb_apitoken: "{{ lookup('aws_ssm', 'bb_apitoken', aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
      tags: [ 'always' ]

    - name: "Set bb_username and bb_workspace facts"
      set_fact:
        bb_username: "{{ item.bitbucket_username | default(bitbucket_username) }}"
        bb_workspace: "{{ item.bitbucket_username | default(bitbucket_username) }}"
      tags: [ 'always' ]

    - name: "Create repo if it does not already exist"
      uri:
        url: https://api.bitbucket.org/2.0/repositories/{{ bb_workspace }}/{{ item.name }}
        method: PUT
        user: "{{ bb_user }}"
        password: "{{  bb_apitoken }}"
        force_basic_auth: yes
        body: |
          {
            "has_wiki": false,
            "is_private": true,
            "project": {
              "key": "{{ item.project_key }}"
            }
          }
        body_format: "json"
        status_code:
          - 200
          - 201
        headers:
          "Content-Type": "application/json"
      when: "(limit_bb_repo is not defined or item.name is search(limit_bb_repo)) and item.service_account_list is defined and item.project_key is defined"
      with_items:
        - "{{ repos }}"

    - name: "Enable pipelines for repo"
      uri:
        url: https://api.bitbucket.org/2.0/repositories/{{ bb_workspace }}/{{ item.name }}/pipelines_config
        method: PUT
        user: "{{  bb_user }}"
        password: "{{  bb_apitoken }}"
        force_basic_auth: yes
        body: |
          {
            "enabled": true,
            "type": "repository_pipelines_configuration"
          }
        body_format: "json"
        status_code:
          - 200
          - 201
        headers:
          "Content-Type": "application/json"
      when: "(limit_bb_repo is not defined or item.name is search(limit_bb_repo)) and item.service_account_list is defined"
      with_items:
        - "{{ repos }}"

#    - name: "Set repo permissions"
#      uri:
#        url: "https://api.bitbucket.org/1.0/group-privileges/{{ bb_workspace }}/{{ item.0.name }}/{{ bb_workspace }}/{{ item.1.group_slug }}"
#        method: PUT
#        user: "{{  bb_user }}"
#        password: "{{  bb_apitoken }}"
#        force_basic_auth: yes
#        body: "{{ item.1.privilege }}"
#        status_code:
#          - 200
#          - 201
#      when: "(limit_bb_repo is not defined or item.0.name is search(limit_bb_repo)) and item.0.service_account_list is defined"
#      loop: "{{ q('subelements', repos, 'group_permissions', {'skip_missing': True}) }}"
#
#    - name: "Set BB repo pipeline variable SA_ACCOUNT_LIST"
#      community.general.bitbucket_pipeline_variable:
#        repository: "{{ item.name }}"
#        username: "{{ bb_username }}"
#        name: "SA_ACCOUNT_LIST"
#        value: "{{ item.service_account_list | map(attribute='name') | list | join(' ') }}"
#        secured: "{{ item.1.secured | default('no') }}"
#        state: "{{ item.1.state | default('present') }}"
#        client_id: "{{ client_id }}"
#        client_secret: "{{ client_secret }}"
#      when: "(limit_bb_repo is not defined or item.name is search(limit_bb_repo)) and item.service_account_list is defined"
#      with_items:
#        - "{{ repos }}"
#
#    - name: "Set BB repo pipeline variable AWS_DEFAULT_REGION"
#      community.general.bitbucket_pipeline_variable:
#        repository: "{{ item.name }}"
#        username: "{{ bb_username }}"
#        name: "AWS_DEFAULT_REGION"
#        value: "{{ item.aws_default_region | default(aws_default_region) }}"
#        secured: "no"
#        state: present
#        client_id: "{{ client_id }}"
#        client_secret: "{{ client_secret }}"
#      when: "(limit_bb_repo is not defined or item.name is search(limit_bb_repo)) and item.service_account_list is defined"
#      with_items:
#        - "{{ repos }}"
#
#    - name: "Set BB repo pipeline variable ROLE_TO_ASSUME"
#      community.general.bitbucket_pipeline_variable:
#        repository: "{{ item.0.name }}"
#        username: "{{ bb_username }}"
#        name: "ROLE_TO_ASSUME_{{ item.1.name }}"
#        value: "arn:aws:iam::{{ lookup('aws_ssm', 'ACCOUNT_ID_' + item.1.name, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}:role/ServiceAccount/{{ item.1.role_to_assume | default('cicd') }}"
#        secured: "{{ item.1.secured | default('no') }}"
#        state: "{{ item.1.state | default('present') }}"
#        client_id: "{{ client_id }}"
#        client_secret: "{{ client_secret }}"
#      when: "limit_bb_repo is not defined or item.0.name is search(limit_bb_repo)"
#      with_subelements:
#        - "{{ repos }}"
#        - "service_account_list"
#        - skip_missing: True
#
#    - name: "Set BB repo pipeline variables holding AWS access key ids"
#      community.general.bitbucket_pipeline_variable:
#        repository: "{{ item.0.name }}"
#        username: "{{ bb_username }}"
#        name: "ACCESS_KEY_ID_{{ item.1.name }}"
#        value: "{{ lookup('aws_ssm', 'ACCESS_KEY_ID_' + item.1.name, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
#        secured: "{{ item.1.secured | default('yes') }}"
#        state: "{{ item.1.state | default('present') }}"
#        client_id: "{{ client_id }}"
#        client_secret: "{{ client_secret }}"
#      when: "limit_bb_repo is not defined or item.0.name is search(limit_bb_repo)"
#      with_subelements:
#        - "{{ repos }}"
#        - "service_account_list"
#        - skip_missing: True
#      tags: [ 'rotate_credentials' ]
#
#    - name: "Set BB repo pipeline variables holding AWS secret keys"
#      community.general.bitbucket_pipeline_variable:
#        repository: "{{ item.0.name }}"
#        username: "{{ bb_username }}"
#        name: "SECRET_ACCESS_KEY_{{ item.1.name }}"
#        value: "{{ lookup('aws_ssm', 'SECRET_ACCESS_KEY_' + item.1.name, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
#        secured: "{{ item.1.secured | default('yes') }}"
#        state: "{{ item.1.state | default('present') }}"
#        client_id: "{{ client_id }}"
#        client_secret: "{{ client_secret }}"
#      when: "limit_bb_repo is not defined or item.0.name is search(limit_bb_repo)"
#      with_subelements:
#        - "{{ repos }}"
#        - "service_account_list"
#        - skip_missing: True
#      tags: [ 'rotate_credentials' ]
#
#    - name: "Set BB repo pipeline variables holding AWS account ID"
#      community.general.bitbucket_pipeline_variable:
#        repository: "{{ item.0.name }}"
#        username: "{{ bb_username }}"
#        name: "ACCOUNT_ID_{{ item.1.name }}"
#        value: "{{ lookup('aws_ssm', 'ACCOUNT_ID_' + item.1.name, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
#        secured: "{{ item.1.secured | default('no') }}"
#        state: "{{ item.1.state | default('present') }}"
#        client_id: "{{ client_id }}"
#        client_secret: "{{ client_secret }}"
#      when: "limit_bb_repo is not defined or item.0 is search(limit_bb_repo)"
#      with_subelements:
#        - "{{ repos }}"
#        - "service_account_list"
#        - skip_missing: True
#
#    - name: "Set custom BB repo pipeline variables"
#      community.general.bitbucket_pipeline_variable:
#        repository: "{{ item.0.name }}"
#        username: "{{ bb_username }}"
#        name: "{{ item.1.name}}"
#        value: "{{ item.1.value }}"
#        secured: "{{ item.1.secured | default('no') }}"
#        state: "{{ item.1.state | default('present') }}"
#        client_id: "{{ client_id }}"
#        client_secret: "{{ client_secret }}"
#      when: "limit_bb_repo is not defined or item.0.name is search(limit_bb_repo)"
#      with_subelements:
#        - "{{ repos }}"
#        - custom_vars
#        - skip_missing: True
#
#    # The private and public key SSM parameters should be manually added to the SSM parameter store in
#    # the bastion account
#    - name: "Set repo pipeline SSH keypair"
#      community.general.bitbucket_pipeline_key_pair:
#        repository: "{{ item.name }}"
#        username: "{{ bb_username }}"
#        public_key: "{{ lookup('aws_ssm', item.ssh.public_key_ssm_var_name, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
#        private_key: "{{ lookup('aws_ssm', item.ssh.private_key_ssm_var_name, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token) }}"
#        state: "{{ item.ssh.state | default('present') }}"
#        client_id: "{{ client_id }}"
#        client_secret: "{{ client_secret }}"
#      when: "item.ssh is defined and (limit_bb_repo is not defined or item.name is search(limit_bb_repo))"
#      with_items:
#        - "{{ repos }}"
